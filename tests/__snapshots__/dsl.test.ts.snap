// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DSL checkDSL() invalid code should handle \`no definitions\` 1`] = `
[
  {
    "endColumn": 9007199254740991,
    "endLineNumber": 4,
    "message": "Invalid syntax",
    "severity": 8,
    "source": "linter",
    "startColumn": 0,
    "startLineNumber": 0,
  },
]
`;

exports[`DSL checkDSL() invalid code should handle \`no relations\` 1`] = `[]`;

exports[`DSL checkDSL() invalid keywords should handle invalid \`and\` 1`] = `
[
  {
    "endColumn": 37,
    "endLineNumber": 6,
    "message": "Invalid syntax",
    "severity": 8,
    "source": "linter",
    "startColumn": 29,
    "startLineNumber": 6,
  },
]
`;

exports[`DSL checkDSL() invalid keywords should handle invalid \`as\` 1`] = `
[
  {
    "endColumn": 26,
    "endLineNumber": 5,
    "message": "Invalid syntax",
    "severity": 8,
    "source": "linter",
    "startColumn": 20,
    "startLineNumber": 5,
  },
]
`;

exports[`DSL checkDSL() invalid keywords should handle invalid \`as\` 2`] = `
[
  {
    "endColumn": 26,
    "endLineNumber": 5,
    "message": "Invalid syntax",
    "severity": 8,
    "source": "linter",
    "startColumn": 20,
    "startLineNumber": 5,
  },
]
`;

exports[`DSL checkDSL() invalid keywords should handle invalid \`but not\` 1`] = `
[
  {
    "endColumn": 41,
    "endLineNumber": 6,
    "message": "Invalid syntax",
    "severity": 8,
    "source": "linter",
    "startColumn": 33,
    "startLineNumber": 6,
  },
]
`;

exports[`DSL checkDSL() invalid keywords should handle invalid \`define\` 1`] = `
[
  {
    "endColumn": 27,
    "endLineNumber": 5,
    "message": "Invalid syntax",
    "severity": 8,
    "source": "linter",
    "startColumn": 7,
    "startLineNumber": 5,
  },
]
`;

exports[`DSL checkDSL() invalid keywords should handle invalid \`or\` 1`] = `
[
  {
    "endColumn": 36,
    "endLineNumber": 6,
    "message": "Invalid syntax",
    "severity": 8,
    "source": "linter",
    "startColumn": 28,
    "startLineNumber": 6,
  },
]
`;

exports[`DSL checkDSL() invalid keywords should handle invalid \`self\` 1`] = `
[
  {
    "endColumn": 26,
    "endLineNumber": 5,
    "message": "Invalid syntax",
    "severity": 8,
    "source": "linter",
    "startColumn": 25,
    "startLineNumber": 5,
  },
]
`;

exports[`DSL checkDSL() semantics should allow model with relations starting with as 1`] = `[]`;

exports[`DSL checkDSL() semantics should allow reference from other relation 1`] = `[]`;

exports[`DSL checkDSL() semantics should allow same relation name in from 1`] = `[]`;

exports[`DSL checkDSL() semantics should allow self reference 1`] = `[]`;

exports[`DSL checkDSL() semantics should be able to handle more than one error 1`] = `
[
  {
    "endColumn": 28,
    "endLineNumber": 5,
    "extraInformation": {
      "error": "self-error",
    },
    "message": "For auto-referencing use 'self'.",
    "severity": 8,
    "source": "linter",
    "startColumn": 22,
    "startLineNumber": 5,
  },
  {
    "endColumn": 33,
    "endLineNumber": 7,
    "extraInformation": {
      "error": "missing-definition",
      "relation": "relation2",
    },
    "message": "The relation \`relation2\` does not exist.",
    "severity": 8,
    "source": "linter",
    "startColumn": 24,
    "startLineNumber": 7,
  },
  {
    "endColumn": 33,
    "endLineNumber": 7,
    "extraInformation": {
      "error": "invalid-syntax",
    },
    "message": "The relation \`relation2\` does not exist in type \`group\`",
    "severity": 8,
    "source": "linter",
    "startColumn": 24,
    "startLineNumber": 7,
  },
  {
    "endColumn": 28,
    "endLineNumber": 8,
    "extraInformation": {
      "error": "self-error",
    },
    "message": "For auto-referencing use 'self'.",
    "severity": 8,
    "source": "linter",
    "startColumn": 22,
    "startLineNumber": 8,
  },
]
`;

exports[`DSL checkDSL() semantics should gracefully handle error 1`] = `
[
  {
    "endColumn": 7,
    "endLineNumber": 17,
    "message": "Invalid syntax",
    "severity": 8,
    "source": "linter",
    "startColumn": 0,
    "startLineNumber": 17,
  },
]
`;

exports[`DSL checkDSL() semantics should handle duplicated definition 1`] = `
[
  {
    "endColumn": 26,
    "endLineNumber": 6,
    "extraInformation": {
      "error": "duplicated-error",
    },
    "message": "Duplicate definition \`writer\`.",
    "severity": 8,
    "source": "linter",
    "startColumn": 5,
    "startLineNumber": 6,
  },
]
`;

exports[`DSL checkDSL() semantics should handle invalid \`invalid and\` 1`] = `
[
  {
    "endColumn": 37,
    "endLineNumber": 5,
    "extraInformation": {
      "error": "missing-definition",
      "relation": "reader",
    },
    "message": "The relation \`reader\` does not exist.",
    "severity": 8,
    "source": "linter",
    "startColumn": 31,
    "startLineNumber": 5,
  },
]
`;

exports[`DSL checkDSL() semantics should handle invalid \`invalid but not\` 1`] = `
[
  {
    "endColumn": 41,
    "endLineNumber": 5,
    "extraInformation": {
      "error": "missing-definition",
      "relation": "reader",
    },
    "message": "The relation \`reader\` does not exist.",
    "severity": 8,
    "source": "linter",
    "startColumn": 35,
    "startLineNumber": 5,
  },
]
`;

exports[`DSL checkDSL() semantics should handle invalid \`invalid from\` 1`] = `
[
  {
    "endColumn": 36,
    "endLineNumber": 5,
    "extraInformation": {
      "error": "missing-definition",
      "relation": "reader",
    },
    "message": "The relation \`reader\` does not exist.",
    "severity": 8,
    "source": "linter",
    "startColumn": 30,
    "startLineNumber": 5,
  },
  {
    "endColumn": 46,
    "endLineNumber": 5,
    "extraInformation": {
      "error": "invalid-syntax",
    },
    "message": "The relation \`test\` does not exist in type \`group\`",
    "severity": 8,
    "source": "linter",
    "startColumn": 42,
    "startLineNumber": 5,
  },
]
`;

exports[`DSL checkDSL() semantics should handle invalid \`invalid or\` 1`] = `
[
  {
    "endColumn": 36,
    "endLineNumber": 5,
    "extraInformation": {
      "error": "missing-definition",
      "relation": "reader",
    },
    "message": "The relation \`reader\` does not exist.",
    "severity": 8,
    "source": "linter",
    "startColumn": 30,
    "startLineNumber": 5,
  },
]
`;

exports[`DSL checkDSL() semantics should handle invalid \`relation not define\` 1`] = `
[
  {
    "endColumn": 28,
    "endLineNumber": 5,
    "extraInformation": {
      "error": "missing-definition",
      "relation": "reader",
    },
    "message": "The relation \`reader\` does not exist.",
    "severity": 8,
    "source": "linter",
    "startColumn": 22,
    "startLineNumber": 5,
  },
]
`;

exports[`DSL checkDSL() semantics should handle invalid \`relation not define\` where name is substring of other word 1`] = `
[
  {
    "endColumn": 25,
    "endLineNumber": 5,
    "extraInformation": {
      "error": "missing-definition",
      "relation": "def",
    },
    "message": "The relation \`def\` does not exist.",
    "severity": 8,
    "source": "linter",
    "startColumn": 22,
    "startLineNumber": 5,
  },
]
`;

exports[`DSL checkDSL() semantics should handle invalid \`self-error\` 1`] = `
[
  {
    "endColumn": 28,
    "endLineNumber": 5,
    "extraInformation": {
      "error": "self-error",
    },
    "message": "For auto-referencing use 'self'.",
    "severity": 8,
    "source": "linter",
    "startColumn": 22,
    "startLineNumber": 5,
  },
]
`;

exports[`DSL checkDSL() semantics should handle invalid \`self-ref in but not\` 1`] = `
[
  {
    "endColumn": 41,
    "endLineNumber": 5,
    "extraInformation": {
      "error": "self-error",
    },
    "message": "For auto-referencing use 'self'.",
    "severity": 8,
    "source": "linter",
    "startColumn": 35,
    "startLineNumber": 5,
  },
]
`;

exports[`DSL checkDSL() semantics should identify correct error line number if there are spaces 1`] = `
[
  {
    "endColumn": 28,
    "endLineNumber": 7,
    "extraInformation": {
      "error": "missing-definition",
      "relation": "reader",
    },
    "message": "The relation \`reader\` does not exist.",
    "severity": 8,
    "source": "linter",
    "startColumn": 22,
    "startLineNumber": 7,
  },
]
`;

exports[`DSL checkDSL() semantics should not allow impossible self reference 1`] = `
[
  {
    "endColumn": 40,
    "endLineNumber": 5,
    "extraInformation": {
      "error": "invalid-syntax",
    },
    "message": "Cannot self-reference (\`member\`) within \`from\` clause.",
    "severity": 8,
    "source": "linter",
    "startColumn": 34,
    "startLineNumber": 5,
  },
]
`;

exports[`DSL checkDSL() semantics should not allow self reference in from relation 1`] = `
[
  {
    "endColumn": 57,
    "endLineNumber": 6,
    "extraInformation": {
      "error": "invalid-syntax",
    },
    "message": "Cannot self-reference (\`subscriber\`) within \`from\` clause.",
    "severity": 8,
    "source": "linter",
    "startColumn": 47,
    "startLineNumber": 6,
  },
]
`;

exports[`DSL checkDSL() should correctly parse a simple sample 1`] = `[]`;

exports[`DSL parseDSL() should correctly parse a complex sample 1`] = `
{
  "schemaVersion": "1.0",
  "types": [
    {
      "comment": "",
      "relations": [
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
            ],
            "type": "single",
          },
          "relation": "member",
        },
      ],
      "type": "team",
    },
    {
      "comment": "",
      "relations": [
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "allowedTypes": [],
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
              {
                "allowedTypes": [],
                "from": "owner",
                "rewrite": "tuple_to_userset",
                "target": "repo_admin",
              },
            ],
            "type": "union",
          },
          "relation": "admin",
        },
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "allowedTypes": [],
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "computed_userset",
                "target": "admin",
              },
            ],
            "type": "union",
          },
          "relation": "maintainer",
        },
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
            ],
            "type": "single",
          },
          "relation": "owner",
        },
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "allowedTypes": [],
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "computed_userset",
                "target": "triager",
              },
              {
                "allowedTypes": [],
                "from": "owner",
                "rewrite": "tuple_to_userset",
                "target": "repo_reader",
              },
            ],
            "type": "union",
          },
          "relation": "reader",
        },
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "allowedTypes": [],
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "computed_userset",
                "target": "writer",
              },
            ],
            "type": "union",
          },
          "relation": "triager",
        },
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "allowedTypes": [],
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "computed_userset",
                "target": "maintainer",
              },
              {
                "allowedTypes": [],
                "from": "owner",
                "rewrite": "tuple_to_userset",
                "target": "repo_writer",
              },
            ],
            "type": "union",
          },
          "relation": "writer",
        },
      ],
      "type": "repo",
    },
    {
      "comment": "",
      "relations": [
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "allowedTypes": [],
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "computed_userset",
                "target": "owner",
              },
            ],
            "type": "union",
          },
          "relation": "billing_manager",
        },
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "allowedTypes": [],
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "computed_userset",
                "target": "owner",
              },
            ],
            "type": "union",
          },
          "relation": "member",
        },
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
            ],
            "type": "single",
          },
          "relation": "owner",
        },
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
            ],
            "type": "single",
          },
          "relation": "repo_admin",
        },
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
            ],
            "type": "single",
          },
          "relation": "repo_reader",
        },
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
            ],
            "type": "single",
          },
          "relation": "repo_writer",
        },
      ],
      "type": "org",
    },
    {
      "comment": "",
      "relations": [
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "allowedTypes": [],
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
              {
                "allowedTypes": [],
                "from": "owner",
                "rewrite": "tuple_to_userset",
                "target": "owner",
              },
            ],
            "type": "union",
          },
          "relation": "app_manager",
        },
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
            ],
            "type": "single",
          },
          "relation": "owner",
        },
      ],
      "type": "app",
    },
  ],
}
`;

exports[`DSL parseDSL() should correctly parse a simple sample 1`] = `
{
  "schemaVersion": "1.0",
  "types": [
    {
      "comment": "",
      "relations": [
        {
          "allowedTypes": [],
          "comment": "",
          "definition": {
            "targets": [
              {
                "allowedTypes": [],
                "from": undefined,
                "rewrite": "direct",
                "target": undefined,
              },
            ],
            "type": "single",
          },
          "relation": "writer",
        },
      ],
      "type": "group",
    },
  ],
}
`;

exports[`DSL parseDSL() should correctly parse a type with no relations 1`] = `
{
  "schemaVersion": "1.0",
  "types": [
    {
      "comment": "",
      "relations": [],
      "type": "group",
    },
  ],
}
`;
